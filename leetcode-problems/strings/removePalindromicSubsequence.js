/* Remove Palindromic Subsequences
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.

Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0

Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b' */

const removePalindromeSub = (s) => {
  if (s.length === 0) return 0;
  const pals = new Map();

  const isPalindrome = (str) => {
    if (pals.has(str)) return pals.get(str);
    if (str.split('').reverse().join('') === str) {
      pals.set(str, true);
      return true;
    }
    pals.set(str, false);
    return false;
  };

  if (isPalindrome(s)) return 1;
  let copy = s;
  let res = 0;

  const removeLargestPalindrome = (str) => {
    const possibles = [];
    for (let i = 0; i < str.length; i += 1) {
      for (let j = i + 1; j <= str.length; j += 1) {
        const subs = str.substring(i, j);
        if (isPalindrome(subs)) {
          possibles[subs.length] = subs;
        }
      }
    }
    return possibles[possibles.length - 1];
  };

  while (copy.length > 0) {
    if (isPalindrome(copy)) {
      res += 1;
      break;
    }
    copy = removeLargestPalindrome(copy);
    res += 1;
  }
  return res;
};

var removePalindromeSub = function(S) {
  if (!S) return 0
  for (let i = 0, j = S.length - 1; i < j; i++, j--)
      if (S.charAt(i) !== S.charAt(j)) return 2
  return 1
};

// removePalindromeSub('ababa');
removePalindromeSub('abb');
removePalindromeSub('baabb');
removePalindromeSub('ababb');
